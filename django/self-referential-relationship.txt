=================================================================

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ externial-for-now
----

-- self-referential relationship (a table pointing to itself).  --> it can come with one-to-one and one-to-many and with many to many .. / below we have three examples...

-Ex01:\  # Employee â†’ Manager (classic example) # one to many

class Employee(models.Model):
    name = models.CharField(max_length=50)
    manager = models.ForeignKey(
        "self",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="team_members"
    )

## Why? >> Each employee can have one manager. >> Each manager can have many employees (team members). >> This models a company hierarchy.

-- Ex01 (continued) :\

boss = Employee.objects.create(name="Alice")
worker1 = Employee.objects.create(name="Bob", manager=boss)
worker2 = Employee.objects.create(name="Charlie", manager=boss)

print(boss.team_members.all())  # [Bob, Charlie]
print(worker1.manager.name)     # Alice

-----

-Ex02:\  # Friends or Relationships (social networks) # one to one

class Person(models.Model):
    name = models.CharField(max_length=50)
    best_friend = models.OneToOneField(
        "self",
        on_delete=models.SET_NULL,
        null=True,
        blank=True
    )

-- Why? #Each person can have at most one best friend, who is also a Person.

-- Ex02 (continued) :\
alice = Person.objects.create(name="Alice")
bob = Person.objects.create(name="Bob", best_friend=alice)

print(bob.best_friend.name)   # Alice

-----

# many to many Ex:\  # ManyToManyField("self") means a row can connect to many rows of the same table.
# Notice ... By default, this is **not symmetrical** (so if Alice is Bobâ€™s friend, Bob is not automatically Aliceâ€™s friend).

class Person(models.Model):
    name = models.CharField(max_length=50)
    friends = models.ManyToManyField("self", blank=True)

alice = Person.objects.create(name="Alice")
bob = Person.objects.create(name="Bob")
charlie = Person.objects.create(name="Charlie")

alice.friends.add(bob)      # Alice â†’ Bob
alice.friends.add(charlie)  # Alice â†’ Charlie

print(alice.friends.all())  # [Bob, Charlie]
print(bob.friends.all())    # []  (not automatically reciprocal!)

----

# Let's see >> symmetrical=True ??

class Person(models.Model):
    name = models.CharField(max_length=50)
    friends = models.ManyToManyField("self", symmetrical=True, blank=True)

alice.friends.add(bob)
print(alice.friends.all())  # [Bob]
print(bob.friends.all())    # [Alice] > auto reciprocal


# ðŸ”¹ Real-life use cases...
-Social network friends â†’ symmetrical=True (friendship is mutual).
-Followers system (Twitter/Instagram) â†’ symmetrical=False.
-Related articles/products (an article can be related to many other articles).

